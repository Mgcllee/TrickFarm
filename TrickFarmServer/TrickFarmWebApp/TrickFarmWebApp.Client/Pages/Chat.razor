@page "/chat"
@inject IJSRuntime JS
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="chat-container">
    <div class="chat-messages" id="chatMessages">
        @foreach (var message in messages)
        {
            <div class="chat-message">@message</div>
        }
    </div>

    <div class="chat-input-bar">
        <input type="text" @bind="messageInput" @bind:event="oninput" @onkeydown="HandleKeyPress" placeholder="메시지를 입력하세요" class="chat-input" />
        <button @onclick="Send" class="chat-send-btn">전송</button>
    </div>
</div>

<style>
    .chat-container {
    position: fixed;
    bottom: 0;
    left: 250px;
    width: calc(100% - 250px);
    display: flex;
    flex-direction: column;
    height: 80vh;
    }

    .chat-messages {
    flex: 1;
    overflow-y: auto;
    border: 1px solid #ccc;
    padding: 10px;
    background: white;
    }

    .chat-input-bar {
    display: flex;
    align-items: center;
    padding: 10px;
    background-color: #f8f9fa;
    border-top: 1px solid #ccc;
    }

    .chat-input {
    flex: 1;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    outline: none;
    }

    .chat-send-btn {
    margin-left: 10px;
    padding: 8px 12px;
    border: none;
    background-color: #007bff;
    color: white;
    cursor: pointer;
    border-radius: 4px;
    }

    .chat-send-btn:hover {
    background-color: #0056b3;
    }
</style>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? user_name;
    private string? messageInput; 
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string>("ReceiveFromServer", (message) =>
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("ConnectToTrickFarm");
    }

    private async Task Send()
    {
        if (hubConnection is not null && IsConnected)
        {
            if (string.IsNullOrEmpty(messageInput))
            {
                return;
            }

            if (string.IsNullOrEmpty(user_name))
            {
                await hubConnection.SendAsync("LoginToServer", messageInput);
                user_name = messageInput;
            }
            else if(messageInput.Contains("join"))
            {
                await hubConnection.SendAsync("JoinToChatrrom", messageInput);
            }
            else
            {
                await hubConnection.SendAsync("SendToServer", messageInput);
            }

            messageInput = "";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Send();
        }
    }

    private async Task InvokeScrollToBottom()
    {
        await JS.InvokeVoidAsync("eval", @"
            setTimeout(() => {
                var lastMessage = document.getElementById('lastMessage');
                if (lastMessage) {
                    lastMessage.scrollIntoView({ behavior: 'smooth', block: 'end' });
                }
            }, 50);
        ");
    }
}
